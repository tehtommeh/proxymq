apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-service
  labels:
    app: test-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-service
  template:
    metadata:
      labels:
        app: test-service
    spec:
      initContainers:
      # Dequeuer as sidecar using init container with restartPolicy: Always
      - name: dequeuer
        image: {{ .Values.dequeuer.image }}
        imagePullPolicy: Always  # For local development
        restartPolicy: Always    # This transforms init container to sidecar
        env:
        - name: RABBITMQ_HOST
          value: "rabbitmq"
        - name: RABBITMQ_PORT
          value: "5672"
        - name: DEQUEUER_POOL_SIZE
          value: "10"
        - name: SERVICE_NAME
          value: "test_service"
        - name: BATCH_MODE
          value: "false"
        - name: DOWNSTREAM_URL
          value: "http://localhost:8000/success"
        - name: HEALTH_CHECK_URL
          value: "http://localhost:8000/health"
        - name: HEALTH_CHECK_INTERVAL
          value: "5"
        - name: HEALTH_CHECK_TIMEOUT
          value: "10"
        - name: HEALTH_CHECK_MAX_RETRIES
          value: "0"
        - name: DOWNSTREAM_TIMEOUT
          value: "30"
        ports:
        - containerPort: 8001
          name: metrics
        readinessProbe:
          httpGet:
            path: /metrics
            port: 8001
          initialDelaySeconds: {{ add (.Values.test_service.startup_delay_seconds | int) 15 }}
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
          timeoutSeconds: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      # Main container - test-service
      - name: test-service
        image: {{ .Values.test_service.image }}
        imagePullPolicy: Always  # For local development
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: STARTUP_DELAY_SECONDS
          value: "{{ .Values.test_service.startup_delay_seconds }}"
        - name: REQUEST_PROCESSING_SECONDS
          value: "{{ .Values.test_service.request_processing_seconds }}"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: {{ add (.Values.test_service.startup_delay_seconds | int) 10 }}
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: {{ add (.Values.test_service.startup_delay_seconds | int) 5 }}
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: test-service-metrics
  labels:
    app: test-service
spec:
  selector:
    app: test-service
  ports:
  - name: metrics
    port: 8001
    targetPort: 8001
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: test-service
  labels:
    app: test-service
spec:
  selector:
    app: test-service
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  type: ClusterIP